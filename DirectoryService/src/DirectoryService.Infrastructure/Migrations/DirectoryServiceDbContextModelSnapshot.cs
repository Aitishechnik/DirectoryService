// <auto-generated />
using System;
using System.Collections.Generic;
using DirectoryService.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DirectoryService.Infrastructure.Migrations
{
    [DbContext(typeof(DirectoryServiceDbContext))]
    partial class DirectoryServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DepartmentLocation", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.HasKey("DepartmentId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("department_locations", (string)null);
                });

            modelBuilder.Entity("DepartmentPosition", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("department_id");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid")
                        .HasColumnName("position_id");

                    b.HasKey("DepartmentId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("department_positions", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Departments.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ChildrenCount")
                        .HasColumnType("integer")
                        .HasColumnName("children_count");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<short>("Depth")
                        .HasColumnType("smallint")
                        .HasColumnName("depth");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.ComplexProperty<Dictionary<string, object>>("Identifier", "DirectoryService.Domain.Entities.Departments.Department.Identifier#DepartmentIdentifier", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Identifier")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("identifier");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Domain.Entities.Departments.Department.Name#DepartmentName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Path", "DirectoryService.Domain.Entities.Departments.Department.Path#DepartmentPath", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("character varying(150)")
                                .HasColumnName("path");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("departments", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "DirectoryService.Domain.Entities.Locations.Location.Address#LocationAddress", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("address");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("city");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("state");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Domain.Entities.Locations.Location.Name#LocationName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Timezone", "DirectoryService.Domain.Entities.Locations.Location.Timezone#LocationTimeZone", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("TimeZone")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("timezone");
                        });

                    b.HasKey("Id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Positions.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "DirectoryService.Domain.Entities.Positions.Position.Name#PositionName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("name");
                        });

                    b.HasKey("Id");

                    b.ToTable("positions", (string)null);
                });

            modelBuilder.Entity("DepartmentLocation", b =>
                {
                    b.HasOne("DirectoryService.Domain.Entities.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.Entities.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DepartmentPosition", b =>
                {
                    b.HasOne("DirectoryService.Domain.Entities.Departments.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DirectoryService.Domain.Entities.Positions.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Departments.Department", b =>
                {
                    b.HasOne("DirectoryService.Domain.Entities.Departments.Department", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Positions.Position", b =>
                {
                    b.OwnsOne("DirectoryService.Domain.Entities.Positions.ValueObjects.PositionDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("PositionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("description");

                            b1.HasKey("PositionId");

                            b1.ToTable("positions");

                            b1.WithOwner()
                                .HasForeignKey("PositionId");
                        });

                    b.Navigation("Description");
                });

            modelBuilder.Entity("DirectoryService.Domain.Entities.Departments.Department", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
